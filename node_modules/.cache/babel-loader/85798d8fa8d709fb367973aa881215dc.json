{"ast":null,"code":"var _jsxFileName = \"D:\\\\Libr\\\\front\\\\src\\\\Page\\\\SystemInfo.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BlockLoading, WindMillLoading } from 'react-loadingg';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { useMessage } from '../hooks/message.hook';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header_Table from '../Components/Table/Header_TableScheme';\nimport TableSheme from '../Components/Table/TableSheme';\nimport Navbar from '../Components/Navbar/Navbar';\n\nfunction SystemInfo(props) {\n  const [items, setItems] = useState([]);\n  const [info_system, setInfo_system] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const {\n    id\n  } = useParams();\n  const url = `http://localhost:5000/api/uploads/${id}`;\n  const url_id = `http://localhost:5000/api/systems/${id}`;\n  /*\r\n  useEffect(() => {\r\n      toast.error(error)\r\n      clearError()\r\n  }, [error, clearError])\r\n  */\n  //Получение информации по системе\n\n  useEffect(async () => {\n    try {\n      const system_data = await request(url_id, 'GET');\n      setInfo_system(system_data);\n    } catch (error) {}\n  }, [isLoaded]); //Получение списка всех файлов для конрктной системы\n\n  useEffect(async () => {\n    try {\n      console.log(url);\n      const data = await request(url, 'GET');\n      setIsLoaded(true);\n      setItems(data);\n    } catch (error) {\n      setIsLoaded(true);\n    }\n  }, [isLoaded]); // Загрузка файла\n\n  const uploadScheme = async selectedFile => {\n    try {\n      const data = new FormData();\n      data.append('file', selectedFile, selectedFile.name);\n      const response = await axios.post(url, data);\n      toast.success(`Файл ${selectedFile.name} добавлен!`);\n      setIsLoaded(false);\n    } catch (error) {\n      toast.error(error.response.data.message);\n    }\n  };\n\n  const dowlandScheme = (_id, name) => {\n    axios({\n      url: `http://127.0.0.1:5000/api/uploads/schema/${_id}`,\n      method: 'GET',\n      responseType: 'blob'\n    }).then(response => {\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', name);\n      document.body.appendChild(link);\n      link.click();\n    });\n    setIsLoaded(false);\n  };\n\n  const removeScheme = async (_id, fileSrc, name) => {\n    try {\n      const data = await axios.delete(`http://127.0.0.1:5000/api/uploads/schema/${_id}`, {\n        data: {\n          fileSrc\n        }\n      });\n      toast.success(`Файл ${name} удален!`);\n      setIsLoaded(false);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const editScheme = async (_id, name) => {\n    try {\n      const data = await axios.put(`http://127.0.0.1:5000/api/uploads/schema/${_id}`, {\n        name\n      });\n      toast.success(`Файл ${name} переименован!`);\n      setIsLoaded(false);\n    } catch (e) {\n      console.error(e);\n    }\n  }; //Блок сортировки данных\n\n\n  const SortByUp = async param => {\n    if (param == \"name\") {\n      setItems(await items.sort((a, b) => a.name < b.name ? 1 : -1));\n    }\n\n    if (param == \"createdAt\") {\n      setItems(await items.sort((a, b) => a.createdAt < b.createdAt ? 1 : -1));\n    }\n\n    setSort(false);\n    setSort(true);\n  };\n\n  const SortByDown = async param => {\n    console.log(param);\n\n    if (param == \"name\") {\n      setItems(await items.sort((a, b) => a.name > b.name ? 1 : -1));\n    }\n\n    if (param == \"createdAt\") {\n      setItems(await items.sort((a, b) => a.createdAt > b.createdAt ? 1 : -1));\n    }\n\n    setSort(false);\n    setSort(true);\n  };\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 16\n      }\n    }, \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \", error.message);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(BlockLoading, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 16\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, Object.assign({}, info_system, {\n      uploadScheme: uploadScheme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table__system\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header_Table, {\n      SortByUp: SortByUp,\n      SortByDown: SortByDown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, items.map(obj => {\n      return /*#__PURE__*/React.createElement(TableSheme, Object.assign({\n        key: obj._id\n      }, obj, {\n        dowlandScheme: dowlandScheme,\n        removeScheme: removeScheme,\n        editScheme: editScheme,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 37\n        }\n      }));\n    }))));\n  }\n}\n\nexport default SystemInfo;","map":{"version":3,"sources":["D:/Libr/front/src/Page/SystemInfo.jsx"],"names":["React","useState","useEffect","axios","BlockLoading","WindMillLoading","useParams","useHttp","useMessage","toast","Header_Table","TableSheme","Navbar","SystemInfo","props","items","setItems","info_system","setInfo_system","isLoaded","setIsLoaded","request","error","clearError","id","url","url_id","system_data","console","log","data","uploadScheme","selectedFile","FormData","append","name","response","post","success","message","dowlandScheme","_id","method","responseType","then","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeScheme","fileSrc","delete","e","editScheme","put","SortByUp","param","sort","a","b","createdAt","setSort","SortByDown","map","obj"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport { BlockLoading, WindMillLoading } from 'react-loadingg';\r\nimport { useParams } from 'react-router-dom'\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { useMessage } from '../hooks/message.hook'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Header_Table from '../Components/Table/Header_TableScheme'\r\nimport TableSheme from '../Components/Table/TableSheme'\r\nimport Navbar from '../Components/Navbar/Navbar'\r\n\r\nfunction SystemInfo(props) {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [info_system, setInfo_system] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n\r\n    const { request, error, clearError } = useHttp()\r\n\r\n    const { id } = useParams()\r\n    const url = `http://localhost:5000/api/uploads/${id}`\r\n    const url_id = `http://localhost:5000/api/systems/${id}`\r\n\r\n    /*\r\n    useEffect(() => {\r\n        toast.error(error)\r\n        clearError()\r\n    }, [error, clearError])\r\n*/\r\n\r\n    //Получение информации по системе\r\n    useEffect(async () => {\r\n        try {\r\n            const system_data = await request(url_id, 'GET')\r\n            setInfo_system(system_data)\r\n        } catch (error) {\r\n        }\r\n    }, [isLoaded])\r\n\r\n\r\n\r\n    //Получение списка всех файлов для конрктной системы\r\n    useEffect(async () => {\r\n        try {\r\n            console.log(url)\r\n            const data = await request(url, 'GET')\r\n            setIsLoaded(true);\r\n            setItems(data);\r\n        } catch (error) {\r\n            setIsLoaded(true);\r\n        }\r\n    }, [isLoaded])\r\n\r\n\r\n    // Загрузка файла\r\n    const uploadScheme = async (selectedFile) => {\r\n        try {\r\n            const data = new FormData()\r\n            data.append('file', selectedFile, selectedFile.name)\r\n            const response = await axios.post(url, data)\r\n            toast.success(`Файл ${selectedFile.name} добавлен!`)\r\n            setIsLoaded(false)\r\n        }\r\n        catch (error) {\r\n            toast.error(error.response.data.message)\r\n        }\r\n\r\n    }\r\n\r\n    const dowlandScheme = (_id, name) => {\r\n        axios({\r\n            url: `http://127.0.0.1:5000/api/uploads/schema/${_id}`,\r\n            method: 'GET',\r\n            responseType: 'blob',\r\n        }).then((response) => {\r\n            const url = window.URL.createObjectURL(new Blob([response.data]));\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.setAttribute('download', name);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n        });\r\n        setIsLoaded(false)\r\n    }\r\n\r\n    const removeScheme = async (_id, fileSrc, name) => {\r\n        try {\r\n            const data = await axios.delete(`http://127.0.0.1:5000/api/uploads/schema/${_id}`, {\r\n                data: {\r\n                    fileSrc\r\n                }\r\n            })\r\n            toast.success(`Файл ${name} удален!`)\r\n            setIsLoaded(false)\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n\r\n    }\r\n\r\n    const editScheme = async (_id, name) => {\r\n        try {\r\n            const data = await axios.put(`http://127.0.0.1:5000/api/uploads/schema/${_id}`, { name })\r\n            toast.success(`Файл ${name} переименован!`)\r\n            setIsLoaded(false)\r\n\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n\r\n    }\r\n\r\n    //Блок сортировки данных\r\n    const SortByUp = async (param) => {\r\n        if (param == \"name\") {\r\n            setItems(await items.sort((a, b) => a.name < b.name ? 1 : -1))\r\n        }\r\n        if (param == \"createdAt\") {\r\n            setItems(await items.sort((a, b) => a.createdAt < b.createdAt ? 1 : -1))\r\n        }\r\n        setSort(false)\r\n        setSort(true)\r\n    }\r\n\r\n    const SortByDown = async (param) => {\r\n        console.log(param)\r\n        if (param == \"name\") {\r\n            setItems(await items.sort((a, b) => a.name > b.name ? 1 : -1))\r\n        }\r\n        if (param == \"createdAt\") {\r\n            setItems(await items.sort((a, b) => a.createdAt > b.createdAt ? 1 : -1))\r\n        }\r\n        setSort(false)\r\n        setSort(true)\r\n    }\r\n\r\n\r\n    if (error) {\r\n        return <div>Ошибка: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n        return <BlockLoading\r\n            size='large' />\r\n    } else {\r\n        return (\r\n            <div>\r\n\r\n                <Navbar {...info_system}\r\n                    uploadScheme={uploadScheme}\r\n                />\r\n\r\n                < table className=\"table__system\">\r\n                    <Header_Table\r\n                        SortByUp={SortByUp}\r\n                        SortByDown={SortByDown}\r\n                    />\r\n                    <tbody>\r\n                        {\r\n                            items.map((obj) => {\r\n                                return (\r\n                                    <TableSheme key={obj._id} {...obj}\r\n                                        dowlandScheme={dowlandScheme}\r\n                                        removeScheme={removeScheme}\r\n                                        editScheme={editScheme}\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                    </ tbody>\r\n                </ table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SystemInfo\r\n"]},"metadata":{},"sourceType":"module"}