{"ast":null,"code":"var _jsxFileName = \"D:\\\\Libr\\\\front\\\\src\\\\Page\\\\SystemList.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BlockLoading, WindMillLoading } from 'react-loadingg';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useHttp } from '../hooks/http.hook';\nimport { useMessage } from '../hooks/message.hook';\nimport ReactDOM from 'react-dom';\nimport TableSystem from '../Components/Table/TableSystem';\nimport Header_Table from '../Components/Table/Header_TableSystems';\nimport AddSystem from '../Components/AddSystem/AddSystem';\nimport Table_Pagination from '../Components/Table/Table_Pagination';\nimport Table_menu from '../Components/Table/Table_menu';\n\nfunction SystemList() {\n  const [items, setItems] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [sort, setSort] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(3);\n  const [currentPosts, setCurrentPosts] = useState([]);\n  const url = \"http://localhost:5000/api/systems\";\n  const {\n    request,\n    error,\n    clearError\n  } = useHttp();\n  useEffect(() => {\n    toast.error(error);\n    clearError();\n  }, [error, clearError]);\n  useEffect(async () => {\n    try {\n      const data = await request(url, 'GET');\n      setItems(data);\n      setIsLoaded(true);\n    } catch (error) {\n      setIsLoaded(true);\n    }\n  }, [isLoaded]);\n  useEffect(() => {\n    console.log(\"itemsSSS\", items);\n    const indexOfLastPost = currentPage * postsPerPage;\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\n    setCurrentPosts(items.slice(indexOfFirstPost, indexOfLastPost));\n    console.log('mas', currentPosts);\n    console.log('col', postsPerPage);\n    console.log('str', currentPage);\n  }, [currentPosts]);\n\n  const addSystem = async (request_type, formInfo) => {\n    try {\n      const data = await request(url, String(request_type), formInfo);\n      toast.success(data.message);\n      setIsLoaded(false);\n    } catch (error) {\n      toast.error(error);\n    }\n  };\n\n  const removeScheme = async (_id, request_type) => {\n    try {\n      const data = await request(url, String(request_type), {\n        _id\n      });\n      toast.success(data.message);\n      setIsLoaded(false);\n    } catch (error) {\n      toast.error(error);\n    }\n  };\n\n  const editScheme = async (_id, name) => {\n    try {\n      const data = await axios.put(`http://localhost:5000/api/systems/${_id}`, {\n        name\n      });\n      toast.success(`Система ${name} переименована!`);\n      setIsLoaded(false);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const SortByUp = async param => {\n    if (param == \"name\") {\n      setCurrentPosts(await currentPosts.sort((a, b) => a.name < b.name ? 1 : -1));\n    }\n\n    if (param == \"createdAt\") {\n      setCurrentPosts(await currentPosts.sort((a, b) => a.createdAt < b.createdAt ? 1 : -1));\n    }\n\n    setSort(false);\n    setSort(true);\n  };\n\n  const SortByDown = async param => {\n    if (param == \"name\") {\n      setCurrentPosts(await currentPosts.sort((a, b) => a.name > b.name ? 1 : -1));\n    }\n\n    if (param == \"createdAt\") {\n      setCurrentPosts(await currentPosts.sort((a, b) => a.createdAt > b.createdAt ? 1 : -1));\n    }\n\n    setSort(false);\n    setSort(true);\n  }; // Get current posts\n\n\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  }; // Выбор кол-ва выводимых строк в таблицк\n\n\n  const newPostsPerPage = entries => {\n    if (entries === \"All\") {\n      entries = items.length;\n    }\n\n    setPostsPerPage(entries);\n  }; // Фильтрация по таблице \n\n\n  const filterTable = search => {\n    items.filter(item => item.name.toLowerCase().indexOf(search) > -1);\n  };\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 16\n      }\n    }, \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \", error.message);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(BlockLoading, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 16\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"system_list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Table_menu, {\n      postsPerPage: postsPerPage,\n      newPostsPerPage: newPostsPerPage,\n      filterTable: filterTable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table__system\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header_Table, {\n      SortByUp: SortByUp,\n      SortByDown: SortByDown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, currentPosts.map(obj => {\n      return /*#__PURE__*/React.createElement(TableSystem, Object.assign({\n        key: obj._id\n      }, obj, {\n        removeScheme: removeScheme,\n        editScheme: editScheme,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 37\n        }\n      }));\n    }))), /*#__PURE__*/React.createElement(Table_Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: items.length,\n      paginate: paginate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AddSystem, {\n      PostInfoSystem: addSystem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }));\n  }\n}\n\nexport default SystemList;","map":{"version":3,"sources":["D:/Libr/front/src/Page/SystemList.jsx"],"names":["React","useState","useEffect","axios","BlockLoading","WindMillLoading","toast","useHttp","useMessage","ReactDOM","TableSystem","Header_Table","AddSystem","Table_Pagination","Table_menu","SystemList","items","setItems","isLoaded","setIsLoaded","sort","setSort","currentPage","setCurrentPage","postsPerPage","setPostsPerPage","currentPosts","setCurrentPosts","url","request","error","clearError","data","console","log","indexOfLastPost","indexOfFirstPost","slice","addSystem","request_type","formInfo","String","success","message","removeScheme","_id","editScheme","name","put","e","SortByUp","param","a","b","createdAt","SortByDown","paginate","pageNumber","newPostsPerPage","entries","length","filterTable","search","filter","item","toLowerCase","indexOf","map","obj"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport { BlockLoading, WindMillLoading } from 'react-loadingg';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { useMessage } from '../hooks/message.hook'\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport TableSystem from '../Components/Table/TableSystem'\r\nimport Header_Table from '../Components/Table/Header_TableSystems'\r\nimport AddSystem from '../Components/AddSystem/AddSystem'\r\nimport Table_Pagination from '../Components/Table/Table_Pagination'\r\nimport Table_menu from '../Components/Table/Table_menu'\r\n\r\n\r\n\r\nfunction SystemList() {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [sort, setSort] = useState(false)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postsPerPage, setPostsPerPage] = useState(3)\r\n    const [currentPosts, setCurrentPosts] = useState([])\r\n\r\n    const url = \"http://localhost:5000/api/systems\"\r\n\r\n    const { request, error, clearError } = useHttp()\r\n\r\n\r\n    useEffect(() => {\r\n        toast.error(error)\r\n\r\n        clearError()\r\n    }, [error, clearError])\r\n\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            const data = await request(url, 'GET')\r\n            setItems(data);\r\n            setIsLoaded(true);\r\n        } catch (error) {\r\n            setIsLoaded(true);\r\n        }\r\n    }, [isLoaded])\r\n\r\n    useEffect(() => {\r\n        console.log(\"itemsSSS\", items)\r\n        const indexOfLastPost = currentPage * postsPerPage;\r\n        const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n        setCurrentPosts( items.slice(indexOfFirstPost, indexOfLastPost))\r\n        console.log('mas',currentPosts)\r\n        console.log('col',postsPerPage)\r\n        console.log('str',currentPage)\r\n    }, [currentPosts])\r\n\r\n\r\n\r\n    const addSystem = async (request_type, formInfo) => {\r\n        try {\r\n            const data = await request(url, String(request_type), formInfo)\r\n            toast.success(data.message)\r\n            setIsLoaded(false)\r\n        } catch (error) {\r\n            toast.error(error)\r\n        }\r\n    }\r\n\r\n\r\n    const removeScheme = async (_id, request_type) => {\r\n        try {\r\n            const data = await request(url, String(request_type), { _id })\r\n            toast.success(data.message)\r\n            setIsLoaded(false)\r\n        } catch (error) {\r\n            toast.error(error)\r\n        }\r\n    }\r\n\r\n    const editScheme = async (_id, name) => {\r\n        try {\r\n            const data = await axios.put(`http://localhost:5000/api/systems/${_id}`, { name })\r\n            toast.success(`Система ${name} переименована!`)\r\n            setIsLoaded(false)\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n\r\n    }\r\n\r\n    const SortByUp = async (param) => {\r\n        if (param == \"name\") {\r\n            setCurrentPosts(await currentPosts.sort((a, b) => a.name < b.name ? 1 : -1))\r\n        }\r\n        if (param == \"createdAt\") {\r\n            setCurrentPosts(await currentPosts.sort((a, b) => a.createdAt < b.createdAt ? 1 : -1))\r\n        }\r\n        setSort(false)\r\n        setSort(true)\r\n    }\r\n\r\n    const SortByDown = async (param) => {\r\n        if (param == \"name\") {\r\n            setCurrentPosts(await currentPosts.sort((a, b) => a.name > b.name ? 1 : -1))\r\n        }\r\n        if (param == \"createdAt\") {\r\n            setCurrentPosts(await currentPosts.sort((a, b) => a.createdAt > b.createdAt ? 1 : -1))\r\n        }\r\n        setSort(false)\r\n        setSort(true)\r\n\r\n    }\r\n\r\n    // Get current posts\r\n\r\n\r\n    const paginate = (pageNumber) => {\r\n        setCurrentPage(pageNumber)\r\n    }\r\n\r\n\r\n    // Выбор кол-ва выводимых строк в таблицк\r\n    const newPostsPerPage = (entries) => {\r\n        if (entries === \"All\") {\r\n            entries = items.length\r\n        }\r\n        setPostsPerPage(entries)\r\n    }\r\n\r\n    // Фильтрация по таблице \r\n    const filterTable = (search) => {\r\n        items.filter((item) => item.name.toLowerCase().indexOf(search) > -1)\r\n    }\r\n\r\n\r\n    if (error) {\r\n        return <div>Ошибка: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n        return <BlockLoading\r\n            size='large' />\r\n    } else {\r\n        return (\r\n            <div className=\"system_list\">\r\n                <Table_menu\r\n                    postsPerPage={postsPerPage}\r\n                    newPostsPerPage={newPostsPerPage}\r\n                    filterTable={filterTable}\r\n                />\r\n                < table className=\"table__system\">\r\n                    <Header_Table\r\n                        SortByUp={SortByUp}\r\n                        SortByDown={SortByDown}\r\n                    />\r\n                    <tbody>\r\n                        {\r\n                            currentPosts.map((obj) => {\r\n                                return (\r\n                                    <TableSystem key={obj._id} {...obj}\r\n                                        removeScheme={removeScheme}\r\n                                        editScheme={editScheme} />\r\n                                )\r\n                            })\r\n                        }\r\n                    </ tbody>\r\n                </ table>\r\n                <Table_Pagination\r\n                    postsPerPage={postsPerPage}\r\n                    totalPosts={items.length}\r\n                    paginate={paginate}\r\n                />\r\n                <AddSystem PostInfoSystem={addSystem} />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default SystemList\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}