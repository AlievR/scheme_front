{"ast":null,"code":"var _jsxFileName = \"D:\\\\Libr\\\\front\\\\src\\\\Page\\\\SystemInfo.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Scheme_view from '../Components/Scheme_view';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { useMessage } from '../hooks/message.hook';\n\nfunction SystemInfo() {\n  const [items, setItems] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false); //потом перенсти\n\n  const [selectedFile, setselectedFile] = useState(null);\n  const message = useMessage();\n  const {\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const {\n    id\n  } = useParams();\n  const url = `http://localhost:5000/api/uploads/${id}`;\n  useEffect(() => {\n    message(error);\n    clearError();\n  }, [error, message, clearError]);\n  useEffect(async () => {\n    try {\n      const data = await request(url, 'GET');\n      setIsLoaded(true);\n      setItems(data);\n    } catch (error) {\n      setIsLoaded(true);\n    }\n  }, [isLoaded]); //перенести потом\n\n  const onChangeHandler = event => {\n    console.log(event.target.files[0]);\n    setselectedFile(event.target.files[0]);\n  };\n\n  const onClickHandler = async () => {\n    try {\n      const data = new FormData();\n      data.append('file', selectedFile);\n      const file = await request(url, 'POST', data);\n      message(data.message);\n      setIsLoaded(false);\n    } catch (error) {\n      console.error('Ошибка:', error);\n    }\n  };\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }\n    }, \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \", error.message);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }\n    }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"system__btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      onChange: onChangeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-success btn-block\",\n      onClick: onClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, \"Upload\")), items.map(obj => {\n      return /*#__PURE__*/React.createElement(Scheme_view, Object.assign({\n        key: obj._id\n      }, obj, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }\n      }));\n    }));\n  }\n}\n\nexport default SystemInfo;","map":{"version":3,"sources":["D:/Libr/front/src/Page/SystemInfo.jsx"],"names":["React","useState","useEffect","Scheme_view","useParams","useHttp","useMessage","SystemInfo","items","setItems","isLoaded","setIsLoaded","selectedFile","setselectedFile","message","request","error","clearError","id","url","data","onChangeHandler","event","console","log","target","files","onClickHandler","FormData","append","file","map","obj","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Scheme_view from '../Components/Scheme_view'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useHttp } from '../hooks/http.hook'\r\nimport { useMessage } from '../hooks/message.hook'\r\n\r\n\r\n\r\nfunction SystemInfo() {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    //потом перенсти\r\n\r\n    const [ selectedFile,  setselectedFile] = useState(null)\r\n    \r\n\r\n    const message = useMessage()\r\n    const { request, error, clearError } = useHttp()\r\n\r\n    const { id } = useParams()\r\n    const url = `http://localhost:5000/api/uploads/${id}`\r\n\r\n    useEffect(() => {\r\n        message(error)\r\n        clearError()\r\n    }, [error, message, clearError])\r\n\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            const data = await request(url, 'GET')\r\n            setIsLoaded(true);\r\n            setItems(data);\r\n        } catch (error) {\r\n            setIsLoaded(true);\r\n        }\r\n    }, [isLoaded])\r\n\r\n\r\n    //перенести потом\r\n    const onChangeHandler = event => {\r\n        console.log(event.target.files[0])\r\n        setselectedFile(event.target.files[0])\r\n    }\r\n\r\n    const onClickHandler = async () => {\r\n        try {\r\n            const data = new FormData() \r\n            data.append('file', selectedFile)\r\n            const file = await request(url, 'POST',data)\r\n            message(data.message)\r\n            setIsLoaded(false)\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n        }\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Ошибка: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Загрузка...</div>;\r\n    } else {\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"system__btn\">\r\n                    <input type=\"file\" name=\"file\" onChange={onChangeHandler} />\r\n                    <button type=\"button\" class=\"btn btn-success btn-block\" onClick={onClickHandler}>Upload</button> \r\n                </div>\r\n\r\n                {\r\n                    items.map((obj) => {\r\n                        return (\r\n                            <Scheme_view key={obj._id} {...obj} />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SystemInfo\r\n"]},"metadata":{},"sourceType":"module"}